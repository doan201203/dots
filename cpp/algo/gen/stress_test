#!/bin/bash

# To color the output text in different colours.
green=$(tput setaf 71);
red=$(tput setaf 1);
blue=$(tput setaf 32);
orange=$(tput setaf 178);
bold=$(tput bold);
reset=$(tput sgr0);

CPP_VERSION="c++17"
COMPILE_FLAGS="-Wall"
TC_GENERATOR_FILE="tc_generator.cpp"
MAX_TESTS="10"

BRUTE_FILE=""
MAIN_FILE=""

############################################################
# USAGE
usage(){
  echo "
USAGE:
      $(basename "${0}") -b <brute-sol> -m <main-sol> [ -t <no.-of-testcases> ]
  Options:
      -b <brute-file>     Specify the name of cpp file having brute force solution. [required]
      -m <main-file>      Specify the name of cpp file having main solution. [required]
      -t <integer>        No. of test cases to generate and stress test on. (optional, default 10)
"
}

# Checks if the main, brute and generator files exists or not.
function check_files_exists() {
    declare -a cpp_files=("$1" "$2" "$3")
    for file in "${cpp_files[@]}"; do
        # echo "${file}"
        if ! [[ -f "$file" ]]; then
            echo "File ${orange}${file}${reset} does not exist in dir $(pwd), exiting..."
            exit 1
        fi
    done
}

# Compiles a given cpp file and stores the executable in variable `executable_fname`
function compile() {
    local cpp_file="$1"
    local executable_fname="$2"

    local start_time="$(date +%s)"
    g++ -std="${CPP_VERSION}" "${cpp_file}" -o "${executable_fname}" "${COMPILE_FLAGS}" || { echo "${bold}${red}Error when compiling: ${reset}${orange}${cpp_file}${reset}"; exit 1; }
    local end_time="$(date +%s)"

    echo "${green}Successfully compiled ${cpp_file}${reset} in ${orange}$((end_time - start_time))s${reset}."
}

function cleanup() {
    rm -f input1.txt generator original brute original_output.txt brute_output.txt
}

function tips() {
    echo ""
    echo "${blue}You might want to use ${green}https://www.diffchecker.com/diff${reset} to better visualize the difference in output :)${reset}"
}

function stress_test() {
    local diff_found=0

    echo "" && echo "Starting stress testing on ${orange}${MAX_TESTS}${reset} randomly generated test cases:" && echo ""

    for ((i=0; i<$MAX_TESTS; i++)); do
        # Generate test_case and save it in input1.txt
        ./generator > input1.txt

        # run original solution, take input from above generated test case i.e. from input1.txt
        # and save it in original_output.txt
        ./original < input1.txt > original_output.txt #|| {echo failed; exit 1;}

        # run brute force solution, take input from above generated test case i.e. from input1.txt
        # and save it in brute_output.txt
        ./brute < input1.txt > brute_output.txt

        # check if files original_output and brute_output
        # differs(we are ignoring spaces and then comparing files)
        if diff -F --label --side-by-side --ignore-space-change original_output.txt brute_output.txt > /dev/null; then
            echo "${orange}test_case #$i: ${bold}${green}passed${reset}"
        else
            echo "${orange}test_case #$i: ${bold}${red}failed${reset}"
            diff_found=1
            break
        fi
    done

    if [[ $diff_found -eq 1 ]]
    then
        echo "${blue}Input: ${reset}"
        cat input1.txt
        echo ""

        echo "${blue}Output(Main sol): ${reset}"
        cat original_output.txt
        echo ""; echo ""

        echo "${blue}Expected(Brute sol): ${reset}"
        cat brute_output.txt
        echo ""

        tips
    fi
}

function main() {
    # Parse args
    while [[ $# -gt 0 ]]; do
    case $1 in
        -b)
        BRUTE_FILE="$2"
        shift # past argument
        shift # past value
        ;;
        -m)
        MAIN_FILE="$2"
        shift
        shift
        ;;
        -h)
        usage
        exit
        ;;
        -t)
        MAX_TESTS="$2"
        re='^[0-9]+$'
        if ! [[ $MAX_TESTS =~ $re ]] ; then
            echo "error: argument -t must be a number e.g. -t 69 "; exit 1
        fi
        shift
        shift
        ;;
        -*|--*)
        echo "Unknown option $1"
        exit 1
        ;;
    esac
    done
    check_files_exists "${BRUTE_FILE}" "${MAIN_FILE}" "${TC_GENERATOR_FILE}"
    compile "${TC_GENERATOR_FILE}" "generator"
    compile "${MAIN_FILE}" "original"
    compile "${BRUTE_FILE}" "brute"

    stress_test
    #cleanup
}

main "$@"
